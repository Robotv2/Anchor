package fr.robotv2.anchor.api.repository;

import java.util.Collection;
import java.util.List;
import java.util.Optional;

/**
 * Provides CRUD (Create, Read, Update, Delete) operations for entities.
 * <p>
 * The Repository interface defines a standard set of methods for persisting,
 * retrieving, and deleting entities of a specific type. Each repository is
 * bound to a particular entity class and handles the database operations
 * for that entity type.
 * </p>
 *
 * @param <ID> the type of entity identifiers
 * @param <E> the entity type extending {@link Identifiable}
 * @since 1.0
 * @see AsyncRepository
 * @see Identifiable
 */
public interface Repository<ID, E extends Identifiable<ID>> {

    /**
     * Saves an entity to the database.
     * <p>
     * This method performs an "upsert" operation - it will insert the entity
     * if it doesn't exist (based on the ID) or update it if it does exist.
     * The entity must have a valid ID value; if the ID is null and the entity
     * is being inserted for the first time, the ID may be generated by the database.
     * </p>
     *
     * @param entity the entity to save, must not be {@code null}
     * @throws IllegalArgumentException if entity is {@code null}
     * @throws RuntimeException if the save operation fails
     */
    void save(E entity);

    /**
     * Saves multiple entities to the database in a batch operation.
     * <p>
     * This method is more efficient than calling {@link #save(Identifiable)} multiple
     * times as it can use database batch operations. Each entity will be inserted
     * or updated based on its ID, similar to the single-entity save operation.
     * </p>
     *
     * @param entities the collection of entities to save, must not be {@code null}
     * @throws IllegalArgumentException if entities is {@code null} or contains {@code null} values
     * @throws RuntimeException if the batch save operation fails
     */
    void saveAll(Collection<E> entities);

    /**
     * Deletes an entity from the database.
     * <p>
     * The entity will be deleted based on its ID. This is equivalent to
     * calling {@link #deleteById(Object)} with the entity's ID.
     * </p>
     *
     * @param entity the entity to delete, must not be {@code null}
     * @throws IllegalArgumentException if entity is {@code null}
     * @throws RuntimeException if the delete operation fails
     */
    void delete(E entity);

    /**
     * Deletes an entity from the database by its ID.
     * <p>
     * This method removes the entity with the specified ID from the database.
     * If no entity with the given ID exists, this method does nothing.
     * </p>
     *
     * @param id the ID of the entity to delete, must not be {@code null}
     * @throws IllegalArgumentException if id is {@code null}
     * @throws RuntimeException if the delete operation fails
     */
    void deleteById(ID id);

    /**
     * Deletes multiple entities from the database in a batch operation.
     * <p>
     * This method is more efficient than calling {@link #delete(Identifiable)} multiple
     * times as it can use database batch operations. Each entity will be deleted
     * based on its ID.
     * </p>
     *
     * @param entities the collection of entities to delete, must not be {@code null}
     * @throws IllegalArgumentException if entities is {@code null} or contains {@code null} values
     * @throws RuntimeException if the batch delete operation fails
     */
    void deleteAll(Collection<E> entities);

    /**
     * Deletes multiple entities from the database by their IDs in a batch operation.
     * <p>
     * This method removes all entities with the specified IDs from the database.
     * It's more efficient than multiple individual delete operations as it can
     * use a single DELETE statement with IN clause.
     * </p>
     *
     * @param ids the collection of IDs to delete, must not be {@code null}
     * @throws IllegalArgumentException if ids is {@code null} or contains {@code null} values
     * @throws RuntimeException if the batch delete operation fails
     */
    void deleteAllById(Collection<ID> ids);

    /**
     * Finds an entity by its ID.
     * <p>
     * Returns an {@link Optional} containing the entity if found, or an empty
     * Optional if no entity with the given ID exists in the database.
     * </p>
     *
     * @param id the ID of the entity to find, must not be {@code null}
     * @return an Optional containing the entity if found, empty otherwise
     * @throws IllegalArgumentException if id is {@code null}
     * @throws RuntimeException if the query operation fails
     */
    Optional<E> findById(ID id);

    /**
     * Retrieves all entities of this type from the database.
     * <p>
     * This method returns a list containing all entities in the corresponding
     * database table. Be careful when using this method with large datasets
     * as it may consume significant memory and processing resources.
     * </p>
     *
     * @return a list of all entities, may be empty if no entities exist
     * @throws RuntimeException if the query operation fails
     */
    List<E> findAll();
}
